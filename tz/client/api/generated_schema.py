# generated by datamodel-codegen:
#   filename:  .temp-openapi-schema.json
#   timestamp: 2024-03-20T15:51:16+00:00

from __future__ import annotations

from enum import Enum
from typing import Any
from uuid import UUID

from pydantic import AwareDatetime, Field

from tz.client.api.schemas import PydanticBaseModel


class AssetCreate(PydanticBaseModel):
    capacity: float | None = Field(None, title="Capacity")
    capacity_unit: str | None = Field(None, title="Capacity Unit")
    sector: str | None = Field(None, title="Sector")
    asset_type: str | None = Field(None, title="Asset Type")
    node_id: str | None = Field(None, title="Node Id")
    edge_id: str | None = Field(None, title="Edge Id")
    technology_id: str | None = Field(None, title="Technology Id")
    node: dict[str, Any] | None = Field(None, title="node")
    edge: dict[str, Any] | None = Field(None, title="edge")
    technology: str | None = Field(None, title="technology")
    power_unit: dict[str, Any] | None = Field(None, title="power_unit")
    power_plant: dict[str, Any] | None = Field(None, title="power_plant")
    power_transmission: dict[str, Any] | None = Field(None, title="power_transmission")


class AssetResourcePatch(PydanticBaseModel):
    uuid: str | None = Field(None, title="Uuid")
    capacity: float | None = Field(None, title="Capacity")
    capacity_unit: str | None = Field(None, title="Capacity Unit")
    sector: str | None = Field(None, title="Sector")
    asset_type: str | None = Field(None, title="Asset Type")
    node_id: str | None = Field(None, title="Node Id")
    edge_id: str | None = Field(None, title="Edge Id")
    technology_id: str | None = Field(None, title="Technology Id")
    node: str | None = Field(None, title="node")
    edge: str | None = Field(None, title="edge")
    technology: str | None = Field(None, title="technology")
    power_unit: str | None = Field(None, title="power_unit")
    power_plant: str | None = Field(None, title="power_plant")
    power_transmission: str | None = Field(None, title="power_transmission")


class BodyRecordBulkCreateResource(PydanticBaseModel):
    file: bytes = Field(..., title="File")


class CommodityCreate(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(True, title="Public")
    name: str | None = Field(None, title="Name")
    properties: dict[str, Any] | None = Field(None, title="Properties")
    technology_id: str | None = Field(None, title="Technology Id")
    owner: str | None = Field(None, title="owner")
    technology: str | None = Field(None, title="technology")
    operating_modes: list[str] | None = Field(None, title="operating_modes")
    records: list[str] | None = Field(None, title="records")
    parents: list[str] | None = Field(None, title="parents")
    children: list[str] | None = Field(None, title="children")


class CommodityResourcePatch(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(None, title="Public")
    creation_time: AwareDatetime | None = Field(None, title="Creation Time")
    uuid: str | None = Field(None, title="Uuid")
    owner_id: str | None = Field(None, title="Owner Id")
    name: str | None = Field(None, title="Name")
    properties: dict[str, Any] | None = Field(None, title="Properties")
    technology_id: str | None = Field(None, title="Technology Id")
    owner: str | None = Field(None, title="owner")
    technology: str | None = Field(None, title="technology")
    operating_modes: list[str] | None = Field(None, title="operating_modes")
    records: list[str] | None = Field(None, title="records")
    parents: list[str] | None = Field(None, title="parents")
    children: list[str] | None = Field(None, title="children")


class DeleteResponse(PydanticBaseModel):
    objects_deleted: int = Field(..., title="Objects Deleted")
    message: str | None = Field(None, title="Message")


class EdgeCreate(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(True, title="Public")
    source_node: str | None = Field(None, title="Source Node")
    target_node: str | None = Field(None, title="Target Node")
    owner: str | None = Field(None, title="owner")
    records: list[str] | None = Field(None, title="records")
    asset_properties: str | None = Field(None, title="asset_properties")


class EdgeResourcePatch(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(None, title="Public")
    creation_time: AwareDatetime | None = Field(None, title="Creation Time")
    uuid: str | None = Field(None, title="Uuid")
    owner_id: str | None = Field(None, title="Owner Id")
    source_node: str | None = Field(None, title="Source Node")
    target_node: str | None = Field(None, title="Target Node")
    owner: str | None = Field(None, title="owner")
    records: list[str] | None = Field(None, title="records")
    asset_properties: str | None = Field(None, title="asset_properties")


class EntityType(Enum):
    technology = "technology"
    commodity = "commodity"
    operating_mode = "operating_mode"
    NA = "NA"


class JobCreate(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(True, title="Public")
    status: str | None = Field(None, title="Status")
    successful: bool | None = Field(None, title="Successful")
    run_id: str | None = Field(None, title="Run Id")
    owner: str | None = Field(None, title="owner")
    run: str | None = Field(None, title="run")


class JobResourcePatch(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(None, title="Public")
    creation_time: AwareDatetime | None = Field(None, title="Creation Time")
    uuid: str | None = Field(None, title="Uuid")
    owner_id: str | None = Field(None, title="Owner Id")
    status: str | None = Field(None, title="Status")
    successful: bool | None = Field(None, title="Successful")
    run_id: str | None = Field(None, title="Run Id")
    owner: str | None = Field(None, title="owner")
    run: str | None = Field(None, title="run")


class LicenseCreate(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(True, title="Public")
    name: str | None = Field(None, title="Name")
    abbreviation: str | None = Field(None, title="Abbreviation")
    full_text: str | None = Field(None, title="Full Text")
    owner: str | None = Field(None, title="owner")
    sources: list[str] | None = Field(None, title="sources")


class LicenseResourcePatch(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(None, title="Public")
    creation_time: AwareDatetime | None = Field(None, title="Creation Time")
    uuid: str | None = Field(None, title="Uuid")
    owner_id: str | None = Field(None, title="Owner Id")
    name: str | None = Field(None, title="Name")
    abbreviation: str | None = Field(None, title="Abbreviation")
    full_text: str | None = Field(None, title="Full Text")
    owner: str | None = Field(None, title="owner")
    sources: list[str] | None = Field(None, title="sources")


class LocationType(Enum):
    node = "node"
    edge = "edge"


class ModelCreate(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(True, title="Public")
    name: str | None = Field(None, title="Name")
    description: str | None = Field(None, title="Description")
    version: str | None = Field(None, title="Version")
    sectors: list[str] | None = Field(None, title="Sectors")
    start_year: int | None = Field(None, title="Start Year")
    end_year: int | None = Field(None, title="End Year")
    n_year_parts: int | None = Field(1, title="N Year Parts")
    n_day_parts: int | None = Field(1, title="N Day Parts")
    start_year_part: int | None = Field(1, title="Start Year Part")
    end_year_part: int | None = Field(1, title="End Year Part")
    status: str | None = Field("draft", title="Status")
    anon_views: int | None = Field(0, title="Anon Views")
    owner: str | None = Field(None, title="owner")
    model_scenarios: list[str] | None = Field(None, title="model_scenarios")
    nodes: list[str] | None = Field(None, title="nodes")
    urls: list[str] | None = Field(None, title="urls")


class ModelResourcePatch(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(None, title="Public")
    creation_time: AwareDatetime | None = Field(None, title="Creation Time")
    uuid: str | None = Field(None, title="Uuid")
    owner_id: str | None = Field(None, title="Owner Id")
    name: str | None = Field(None, title="Name")
    description: str | None = Field(None, title="Description")
    version: str | None = Field(None, title="Version")
    sectors: list[str] | None = Field(None, title="Sectors")
    start_year: int | None = Field(None, title="Start Year")
    end_year: int | None = Field(None, title="End Year")
    n_year_parts: int | None = Field(None, title="N Year Parts")
    n_day_parts: int | None = Field(None, title="N Day Parts")
    start_year_part: int | None = Field(None, title="Start Year Part")
    end_year_part: int | None = Field(None, title="End Year Part")
    status: str | None = Field(None, title="Status")
    anon_views: int | None = Field(None, title="Anon Views")
    owner: str | None = Field(None, title="owner")
    model_scenarios: list[str] | None = Field(None, title="model_scenarios")
    nodes: list[str] | None = Field(None, title="nodes")
    urls: list[str] | None = Field(None, title="urls")


class ModelScenarioCreate(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(True, title="Public")
    name: str | None = Field(None, title="Name")
    description: str | None = Field(None, title="Description")
    version: str | None = Field(None, title="Version")
    status: str | None = Field("draft", title="Status")
    featured: bool | None = Field(False, title="Featured")
    scenario_heritage_id: str | None = Field(None, title="Scenario Heritage Id")
    owner: str | None = Field(None, title="owner")
    model: str | None = Field(None, title="model")
    scenario_index: str | None = Field(None, title="scenario_index")
    scenario_heritage: str | None = Field(None, title="scenario_heritage")
    runs: list[str] | None = Field(None, title="runs")
    records: list[str] | None = Field(None, title="records")
    urls: list[str] | None = Field(None, title="urls")


class ModelScenarioResourcePatch(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(None, title="Public")
    creation_time: AwareDatetime | None = Field(None, title="Creation Time")
    uuid: str | None = Field(None, title="Uuid")
    owner_id: str | None = Field(None, title="Owner Id")
    name: str | None = Field(None, title="Name")
    description: str | None = Field(None, title="Description")
    version: str | None = Field(None, title="Version")
    status: str | None = Field(None, title="Status")
    featured: bool | None = Field(None, title="Featured")
    model_id: str | None = Field(None, title="Model Id")
    scenario_index_id: str | None = Field(None, title="Scenario Index Id")
    scenario_heritage_id: str | None = Field(None, title="Scenario Heritage Id")
    owner: str | None = Field(None, title="owner")
    model: str | None = Field(None, title="model")
    scenario_index: str | None = Field(None, title="scenario_index")
    scenario_heritage: str | None = Field(None, title="scenario_heritage")
    runs: list[str] | None = Field(None, title="runs")
    records: list[str] | None = Field(None, title="records")
    urls: list[str] | None = Field(None, title="urls")


class NodeAliasCreate(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(True, title="Public")
    alias: str | None = Field(None, title="Alias")
    alias_type: str | None = Field(None, title="Alias Type")
    alias_lang: str | None = Field(None, title="Alias Lang")
    primary: bool | None = Field(None, title="Primary")
    node_id: str | None = Field(None, title="Node Id")
    power_unit_id: str | None = Field(None, title="Power Unit Id")
    owner: str | None = Field(None, title="owner")
    node: str | None = Field(None, title="node")
    power_unit: str | None = Field(None, title="power_unit")


class NodeAliasResourcePatch(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(None, title="Public")
    creation_time: AwareDatetime | None = Field(None, title="Creation Time")
    uuid: str | None = Field(None, title="Uuid")
    owner_id: str | None = Field(None, title="Owner Id")
    alias: str | None = Field(None, title="Alias")
    alias_type: str | None = Field(None, title="Alias Type")
    alias_lang: str | None = Field(None, title="Alias Lang")
    primary: bool | None = Field(None, title="Primary")
    node_id: str | None = Field(None, title="Node Id")
    power_unit_id: str | None = Field(None, title="Power Unit Id")
    owner: str | None = Field(None, title="owner")
    node: str | None = Field(None, title="node")
    power_unit: str | None = Field(None, title="power_unit")


class NodeType(Enum):
    power_unit = "power_unit"
    power_plant = "power_plant"
    admin_1 = "admin_1"
    grid_region = "grid_region"
    admin_0 = "admin_0"
    region_a = "region_a"
    region_b = "region_b"
    continent = "continent"
    root = "root"
    unknown = "unknown"


class OperatingModeCreate(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(True, title="Public")
    name: str | None = Field(None, title="Name")
    properties: dict[str, Any] | None = Field(None, title="Properties")
    technology_id: str | None = Field(None, title="Technology Id")
    commodity_id: str | None = Field(None, title="Commodity Id")
    owner: str | None = Field(None, title="owner")
    technology: str | None = Field(None, title="technology")
    commodity: str | None = Field(None, title="commodity")
    records: list[str] | None = Field(None, title="records")


class OperatingModeResourcePatch(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(None, title="Public")
    creation_time: AwareDatetime | None = Field(None, title="Creation Time")
    uuid: str | None = Field(None, title="Uuid")
    owner_id: str | None = Field(None, title="Owner Id")
    name: str | None = Field(None, title="Name")
    properties: dict[str, Any] | None = Field(None, title="Properties")
    technology_id: str | None = Field(None, title="Technology Id")
    commodity_id: str | None = Field(None, title="Commodity Id")
    owner: str | None = Field(None, title="owner")
    technology: str | None = Field(None, title="technology")
    commodity: str | None = Field(None, title="commodity")
    records: list[str] | None = Field(None, title="records")


class PotentialResponse(PydanticBaseModel):
    node: str = Field(..., description="The node slug", title="Node")
    technology: str = Field(
        ...,
        description="The technology for which the potential has been calculated",
        title="Technology",
    )
    potential: float = Field(..., description="The renewable potential", title="Potential")
    unit: str = Field(..., description="The unit of the potential", title="Unit")
    year: int | None = Field(2013, title="Year")
    n_year_parts: int | None = Field(1, title="N Year Parts")
    year_part: int | None = Field(1, title="Year Part")
    n_day_parts: int | None = Field(1, title="N Day Parts")
    day_part: int | None = Field(1, title="Day Part")


class PowerPlant(PydanticBaseModel):
    asset_id: UUID = Field(..., title="Asset Id")
    power_plant: str = Field(..., title="Power Plant")


class PowerTransmission(PydanticBaseModel):
    asset_id: UUID = Field(..., title="Asset Id")
    power_transmission: str = Field(..., title="Power Transmission")


class PowerUnit(PydanticBaseModel):
    asset_id: UUID = Field(..., title="Asset Id")
    power_unit: str = Field(..., title="Power Unit")


class PublisherCreate(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(True, title="Public")
    name: str | None = Field(None, title="Name")
    organisation_type: str | None = Field(None, title="Organisation Type")
    short_name: str | None = Field(None, title="Short Name")
    url: str | None = Field(None, title="Url")
    owner: str | None = Field(None, title="owner")
    sources: list[str] | None = Field(None, title="sources")


class PublisherResourcePatch(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(None, title="Public")
    creation_time: AwareDatetime | None = Field(None, title="Creation Time")
    uuid: str | None = Field(None, title="Uuid")
    owner_id: str | None = Field(None, title="Owner Id")
    name: str | None = Field(None, title="Name")
    organisation_type: str | None = Field(None, title="Organisation Type")
    short_name: str | None = Field(None, title="Short Name")
    url: str | None = Field(None, title="Url")
    owner: str | None = Field(None, title="owner")
    sources: list[str] | None = Field(None, title="sources")


class RecordType(Enum):
    production = "production"
    price = "price"
    event = "event"
    land_cover = "land_cover"
    technology_parameter = "technology_parameter"
    capacity_factor = "capacity_factor"
    renewable_potential = "renewable_potential"


class RunCreate(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(True, title="Public")
    name: str | None = Field(None, title="Name")
    run_spec: dict[str, Any] | None = Field(None, title="Run Spec")
    validated: bool | None = Field(False, title="Validated")
    description: str | None = Field(None, title="Description")
    featured: bool | None = Field(False, title="Featured")
    model_scenario_id: str | None = Field(None, title="Model Scenario Id")
    owner: str | None = Field(None, title="owner")
    model_scenario: str | None = Field(None, title="model_scenario")
    jobs: list[str] | None = Field(None, title="jobs")
    urls: list[str] | None = Field(None, title="urls")


class RunResourcePatch(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(None, title="Public")
    creation_time: AwareDatetime | None = Field(None, title="Creation Time")
    uuid: str | None = Field(None, title="Uuid")
    owner_id: str | None = Field(None, title="Owner Id")
    name: str | None = Field(None, title="Name")
    run_spec: dict[str, Any] | None = Field(None, title="Run Spec")
    validated: bool | None = Field(None, title="Validated")
    description: str | None = Field(None, title="Description")
    featured: bool | None = Field(None, title="Featured")
    model_scenario_id: str | None = Field(None, title="Model Scenario Id")
    owner: str | None = Field(None, title="owner")
    model_scenario: str | None = Field(None, title="model_scenario")
    jobs: list[str] | None = Field(None, title="jobs")
    urls: list[str] | None = Field(None, title="urls")


class ScenarioIndex(PydanticBaseModel):
    uuid: UUID | None = Field(None, title="Uuid")


class ScenarioType(Enum):
    model_scenario = "model_scenario"
    source_scenario = "source_scenario"


class SourceCreate(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(True, title="Public")
    name: str | None = Field(None, title="Name")
    short_name: str | None = Field(None, title="Short Name")
    description: str | None = Field(None, title="Description")
    year: int | None = Field(None, title="Year")
    month: int | None = Field(None, title="Month")
    day: int | None = Field(None, title="Day")
    quarter: int | None = Field(None, title="Quarter")
    publisher_id: str | None = Field(None, title="Publisher Id")
    license_id: str | None = Field(None, title="License Id")
    owner: str | None = Field(None, title="owner")
    publisher: str | None = Field(None, title="publisher")
    license: str | None = Field(None, title="license")


class SourceResourcePatch(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(None, title="Public")
    creation_time: AwareDatetime | None = Field(None, title="Creation Time")
    uuid: str | None = Field(None, title="Uuid")
    owner_id: str | None = Field(None, title="Owner Id")
    name: str | None = Field(None, title="Name")
    short_name: str | None = Field(None, title="Short Name")
    description: str | None = Field(None, title="Description")
    year: int | None = Field(None, title="Year")
    month: int | None = Field(None, title="Month")
    day: int | None = Field(None, title="Day")
    quarter: int | None = Field(None, title="Quarter")
    publisher_id: str | None = Field(None, title="Publisher Id")
    license_id: str | None = Field(None, title="License Id")
    owner: str | None = Field(None, title="owner")
    publisher: str | None = Field(None, title="publisher")
    license: str | None = Field(None, title="license")


class SourceScenarioCreate(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(True, title="Public")
    name: str | None = Field(None, title="Name")
    description: str | None = Field(None, title="Description")
    version: str | None = Field(None, title="Version")
    status: str | None = Field("draft", title="Status")
    featured: bool | None = Field(False, title="Featured")
    owner: str | None = Field(None, title="owner")
    source: str | None = Field(None, title="source")
    scenario_index: str | None = Field(None, title="scenario_index")
    records: list[str] | None = Field(None, title="records")


class SourceScenarioResourcePatch(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(None, title="Public")
    creation_time: AwareDatetime | None = Field(None, title="Creation Time")
    uuid: str | None = Field(None, title="Uuid")
    owner_id: str | None = Field(None, title="Owner Id")
    name: str | None = Field(None, title="Name")
    description: str | None = Field(None, title="Description")
    version: str | None = Field(None, title="Version")
    status: str | None = Field(None, title="Status")
    featured: bool | None = Field(None, title="Featured")
    source_id: str | None = Field(None, title="Source Id")
    scenario_index_id: str | None = Field(None, title="Scenario Index Id")
    owner: str | None = Field(None, title="owner")
    source: str | None = Field(None, title="source")
    scenario_index: str | None = Field(None, title="scenario_index")
    records: list[str] | None = Field(None, title="records")


class TechnologyCreate(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(True, title="Public")
    name: str | None = Field(None, title="Name")
    properties: dict[str, Any] | None = Field(None, title="Properties")
    owner: str | None = Field(None, title="owner")
    commodities: list[str] | None = Field(None, title="commodities")
    operating_modes: list[str] | None = Field(None, title="operating_modes")
    records: list[str] | None = Field(None, title="records")
    parents: list[str] | None = Field(None, title="parents")
    children: list[str] | None = Field(None, title="children")


class TechnologyResourcePatch(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(None, title="Public")
    creation_time: AwareDatetime | None = Field(None, title="Creation Time")
    uuid: str | None = Field(None, title="Uuid")
    owner_id: str | None = Field(None, title="Owner Id")
    name: str | None = Field(None, title="Name")
    properties: dict[str, Any] | None = Field(None, title="Properties")
    owner: str | None = Field(None, title="owner")
    commodities: list[str] | None = Field(None, title="commodities")
    operating_modes: list[str] | None = Field(None, title="operating_modes")
    records: list[str] | None = Field(None, title="records")
    parents: list[str] | None = Field(None, title="parents")
    children: list[str] | None = Field(None, title="children")


class TypeAlias(Enum):
    power_unit = "power_unit"
    power_plant = "power_plant"
    power_transmission = "power_transmission"
    grid_region = "grid_region"
    country = "country"
    province = "province"
    major_sub_region = "major_sub_region"
    minor_sub_region = "minor_sub_region"
    continent = "continent"
    root = "root"
    unknown = "unknown"
    field_ = ""
    administrative_area = "administrative_area"
    administrative_subdivisions = "administrative_subdivisions"
    arctic_region = "arctic_region"
    arrondissement = "arrondissement"
    atoll = "atoll"
    autonomous_city = "autonomous_city"
    autonomous_commune = "autonomous_commune"
    autonomous_community = "autonomous_community"
    autonomous_district = "autonomous_district"
    autonomous_island = "autonomous_island"
    autonomous_province = "autonomous_province"
    autonomous_region = "autonomous_region"
    autonomous_republic = "autonomous_republic"
    autonomous_sector = "autonomous_sector"
    autonomous_territory = "autonomous_territory"
    borough = "borough"
    canton = "canton"
    capital_city = "capital_city"
    capital_district = "capital_district"
    capital_metropolitan_city = "capital_metropolitan_city"
    capital_territory = "capital_territory"
    captial_city_district = "captial_city_district"
    centrally_administered_area = "centrally_administered_area"
    circuit = "circuit"
    city = "city"
    commissiary = "commissiary"
    commune = "commune"
    constituent_country = "constituent_country"
    county = "county"
    decentralized_administration = "decentralized_administration"
    department = "department"
    dependency = "dependency"
    development_region = "development_region"
    directly_governed_city = "directly_governed_city"
    district = "district"
    districts_of_republican_subordin = "districts_of_republican_subordin"
    division = "division"
    economic_prefecture = "economic_prefecture"
    emirate = "emirate"
    entity = "entity"
    federal_district = "federal_district"
    federal_territory = "federal_territory"
    free_state = "free_state"
    governorate = "governorate"
    group_of_islands = "group_of_islands"
    independent_city = "independent_city"
    independent_town = "independent_town"
    indigenous_territory = "indigenous_territory"
    intendancy = "intendancy"
    island = "island"
    island_council = "island_council"
    island_group = "island_group"
    kingdom = "kingdom"
    metropolian_region = "metropolian_region"
    metropolis = "metropolis"
    metropolitan_autonomous_city = "metropolitan_autonomous_city"
    metropolitan_city = "metropolitan_city"
    municipality = "municipality"
    municipality_prefecture = "municipality_prefecture"
    national_district = "national_district"
    national_park = "national_park"
    outer_islands = "outer_islands"
    outlying_area = "outlying_area"
    overseas_collectivity = "overseas_collectivity"
    overseas_territory = "overseas_territory"
    parish = "parish"
    parish_district = "parish_district"
    prefecture = "prefecture"
    quarter = "quarter"
    reef = "reef"
    region = "region"
    republic = "republic"
    sovereign_base_area = "sovereign_base_area"
    special_administrative_region = "special_administrative_region"
    special_city = "special_city"
    special_municipality = "special_municipality"
    special_region_zone = "special_region_zone"
    state = "state"
    statistical_region = "statistical_region"
    sub_region = "sub_region"
    territorial_unit = "territorial_unit"
    territory = "territory"
    town = "town"
    town_council = "town_council"
    town_district = "town_district"
    unincorporated_territory = "unincorporated_territory"
    union_territory = "union_territory"
    urban_prefecture = "urban_prefecture"
    village_district = "village_district"
    voivodeship = "voivodeship"


class URLType(Enum):
    production = "production"
    price = "price"
    event = "event"
    land_cover = "land_cover"
    technology_parameter = "technology_parameter"


class UrlIndexCreate(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(True, title="Public")
    url: str | None = Field(None, title="Url")
    url_type: URLType | None = None
    properties: dict[str, Any] | None = Field(None, title="Properties")
    model_uuid: str | None = Field(None, title="Model Uuid")
    model_scenario_uuid: str | None = Field(None, title="Model Scenario Uuid")
    run_uuid: str | None = Field(None, title="Run Uuid")
    owner: str | None = Field(None, title="owner")
    model: str | None = Field(None, title="model")
    model_scenario: str | None = Field(None, title="model_scenario")
    run: str | None = Field(None, title="run")


class UrlIndexResourcePatch(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(None, title="Public")
    creation_time: AwareDatetime | None = Field(None, title="Creation Time")
    uuid: str | None = Field(None, title="Uuid")
    owner_id: str | None = Field(None, title="Owner Id")
    url: str | None = Field(None, title="Url")
    url_type: URLType | None = None
    properties: dict[str, Any] | None = Field(None, title="Properties")
    model_uuid: str | None = Field(None, title="Model Uuid")
    model_scenario_uuid: str | None = Field(None, title="Model Scenario Uuid")
    run_uuid: str | None = Field(None, title="Run Uuid")
    owner: str | None = Field(None, title="owner")
    model: str | None = Field(None, title="model")
    model_scenario: str | None = Field(None, title="model_scenario")
    run: str | None = Field(None, title="run")


class User(PydanticBaseModel):
    slug: str = Field(..., title="Slug")
    public: bool | None = Field(False, title="Public")
    creation_time: AwareDatetime | None = Field(..., title="Creation Time")
    role: str = Field(..., title="Role")
    permissions: list[str] | None = Field(None, title="Permissions")
    username: str = Field(..., title="Username")
    email: str | None = Field(None, title="Email")
    tenant: str = Field(..., title="Tenant")
    auth0_creation_time: AwareDatetime | None = Field(None, title="Auth0 Creation Time")
    email_verified: bool | None = Field(False, title="Email Verified")
    family_name: str | None = Field(None, title="Family Name")
    given_name: str | None = Field(None, title="Given Name")
    last_password_reset: AwareDatetime | None = Field(None, title="Last Password Reset")
    phone_number: str | None = Field(None, title="Phone Number")
    phone_verified: bool | None = Field(False, title="Phone Verified")
    picture: str | None = Field(None, title="Picture")
    updated_at: AwareDatetime | None = Field(None, title="Updated At")
    organisation: str | None = Field(None, title="Organisation")
    job_title: str | None = Field(None, title="Job Title")
    contact_consent: bool | None = Field(False, title="Contact Consent")
    terms_conditions_accepted: bool | None = Field(None, title="Terms Conditions Accepted")
    country: str | None = Field(None, title="Country")
    industry_sector: str | None = Field(None, title="Industry Sector")
    owner: User | str | None = Field(..., title="Owner")


class UserCreate(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(False, title="Public")
    role: str | None = Field(None, title="Role")
    permissions: list[str] | None = Field(None, title="Permissions")
    username: str | None = Field(None, title="Username")
    email: str | None = Field(None, title="Email")
    tenant: str | None = Field(None, title="Tenant")
    auth0_creation_time: AwareDatetime | None = Field(None, title="Auth0 Creation Time")
    email_verified: bool | None = Field(False, title="Email Verified")
    family_name: str | None = Field(None, title="Family Name")
    given_name: str | None = Field(None, title="Given Name")
    last_password_reset: AwareDatetime | None = Field(None, title="Last Password Reset")
    phone_number: str | None = Field(None, title="Phone Number")
    phone_verified: bool | None = Field(False, title="Phone Verified")
    picture: str | None = Field(None, title="Picture")
    updated_at: AwareDatetime | None = Field(None, title="Updated At")
    organisation: str | None = Field(None, title="Organisation")
    job_title: str | None = Field(None, title="Job Title")
    contact_consent: bool | None = Field(False, title="Contact Consent")
    terms_conditions_accepted: bool | None = Field(None, title="Terms Conditions Accepted")
    country: str | None = Field(None, title="Country")
    industry_sector: str | None = Field(None, title="Industry Sector")
    app_metadata: dict[str, Any] | None = Field(None, title="App Metadata")
    user_metadata: dict[str, Any] | None = Field(None, title="User Metadata")
    owner: str | None = Field(None, title="owner")


class UserPagination(PydanticBaseModel):
    current_page: int | None = Field(0, title="current_page")
    next_page: int | None = Field(..., title="next_page")
    total_results: int | None = Field(..., title="total_results")
    users: list[User] | None = Field(..., title="")


class UserResourcePatch(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(None, title="Public")
    creation_time: AwareDatetime | None = Field(None, title="Creation Time")
    uuid: str | None = Field(None, title="Uuid")
    owner_id: str | None = Field(None, title="Owner Id")
    role: str | None = Field(None, title="Role")
    permissions: list[str] | None = Field(None, title="Permissions")
    username: str | None = Field(None, title="Username")
    email: str | None = Field(None, title="Email")
    tenant: str | None = Field(None, title="Tenant")
    auth0_creation_time: AwareDatetime | None = Field(None, title="Auth0 Creation Time")
    email_verified: bool | None = Field(None, title="Email Verified")
    family_name: str | None = Field(None, title="Family Name")
    given_name: str | None = Field(None, title="Given Name")
    last_password_reset: AwareDatetime | None = Field(None, title="Last Password Reset")
    phone_number: str | None = Field(None, title="Phone Number")
    phone_verified: bool | None = Field(None, title="Phone Verified")
    picture: str | None = Field(None, title="Picture")
    updated_at: AwareDatetime | None = Field(None, title="Updated At")
    organisation: str | None = Field(None, title="Organisation")
    job_title: str | None = Field(None, title="Job Title")
    contact_consent: bool | None = Field(None, title="Contact Consent")
    terms_conditions_accepted: bool | None = Field(None, title="Terms Conditions Accepted")
    country: str | None = Field(None, title="Country")
    industry_sector: str | None = Field(None, title="Industry Sector")
    app_metadata: dict[str, Any] | None = Field(None, title="App Metadata")
    user_metadata: dict[str, Any] | None = Field(None, title="User Metadata")
    owner: str | None = Field(None, title="owner")


class ValidationError(PydanticBaseModel):
    loc: list[str | int] = Field(..., title="Location")
    msg: str = Field(..., title="Message")
    type: str = Field(..., title="Error Type")


class HTTPValidationError(PydanticBaseModel):
    detail: list[ValidationError] | None = Field(None, title="Detail")


class NodeCreate(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(True, title="Public")
    type_alias: TypeAlias | None = None
    properties: dict[str, Any] | None = Field(None, title="Properties")
    is_asset: bool | None = Field(None, title="Is Asset")
    node_type_discriminator: NodeType | None = None
    owner: str | None = Field(None, title="owner")
    aliases: list[str] | None = Field(None, title="aliases")
    records: list[str] | None = Field(None, title="records")
    asset_properties: str | None = Field(None, title="asset_properties")
    node_type: str | None = Field(None, title="node_type")
    parents: list[str] | None = Field(None, title="parents")
    children: list[str] | None = Field(None, title="children")
    neighbours_out: list[str] | None = Field(None, title="neighbours_out")
    neighbours_in: list[str] | None = Field(None, title="neighbours_in")


class NodeResourcePatch(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(None, title="Public")
    creation_time: AwareDatetime | None = Field(None, title="Creation Time")
    uuid: str | None = Field(None, title="Uuid")
    owner_id: str | None = Field(None, title="Owner Id")
    type_alias: TypeAlias | None = None
    properties: dict[str, Any] | None = Field(None, title="Properties")
    is_asset: bool | None = Field(None, title="Is Asset")
    node_type_discriminator: NodeType | None = None
    owner: str | None = Field(None, title="owner")
    aliases: list[str] | None = Field(None, title="aliases")
    records: list[str] | None = Field(None, title="records")
    asset_properties: str | None = Field(None, title="asset_properties")
    node_type: str | None = Field(None, title="node_type")
    parents: list[str] | None = Field(None, title="parents")
    children: list[str] | None = Field(None, title="children")
    neighbours_out: list[str] | None = Field(None, title="neighbours_out")
    neighbours_in: list[str] | None = Field(None, title="neighbours_in")


class RecordCreate(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(True, title="Public")
    year: int | None = Field(None, title="Year")
    n_year_parts: int | None = Field(None, title="N Year Parts")
    year_part: int | None = Field(None, title="Year Part")
    n_day_parts: int | None = Field(None, title="N Day Parts")
    day_part: int | None = Field(None, title="Day Part")
    timestamp: AwareDatetime | None = Field(None, title="Timestamp")
    scenario_type: ScenarioType | None = None
    location_type: LocationType | None = None
    entity_type: EntityType | None = None
    record_type: RecordType | None = None
    value: float | None = Field(None, title="Value")
    unit: str | None = Field(None, title="Unit")
    properties: dict[str, Any] | None = Field(None, title="Properties")
    node_id: str | None = Field(None, title="Node Id")
    edge_id: str | None = Field(None, title="Edge Id")
    model_scenario_id: str | None = Field(None, title="Model Scenario Id")
    source_scenario_id: str | None = Field(None, title="Source Scenario Id")
    technology_id: str | None = Field(None, title="Technology Id")
    commodity_id: str | None = Field(None, title="Commodity Id")
    operating_mode_id: str | None = Field(None, title="Operating Mode Id")
    owner: str | None = Field(None, title="owner")
    node: str | None = Field(None, title="node")
    edge: str | None = Field(None, title="edge")
    model_scenario: str | None = Field(None, title="model_scenario")
    source_scenario: str | None = Field(None, title="source_scenario")
    technology: str | None = Field(None, title="technology")
    commodity: str | None = Field(None, title="commodity")
    operating_mode: str | None = Field(None, title="operating_mode")


class RecordResourcePatch(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(None, title="Public")
    creation_time: AwareDatetime | None = Field(None, title="Creation Time")
    uuid: str | None = Field(None, title="Uuid")
    owner_id: str | None = Field(None, title="Owner Id")
    year: int | None = Field(None, title="Year")
    n_year_parts: int | None = Field(None, title="N Year Parts")
    year_part: int | None = Field(None, title="Year Part")
    n_day_parts: int | None = Field(None, title="N Day Parts")
    day_part: int | None = Field(None, title="Day Part")
    timestamp: AwareDatetime | None = Field(None, title="Timestamp")
    scenario_type: ScenarioType | None = None
    location_type: LocationType | None = None
    entity_type: EntityType | None = None
    record_type: RecordType | None = None
    value: float | None = Field(None, title="Value")
    unit: str | None = Field(None, title="Unit")
    properties: dict[str, Any] | None = Field(None, title="Properties")
    node_id: str | None = Field(None, title="Node Id")
    edge_id: str | None = Field(None, title="Edge Id")
    model_scenario_id: str | None = Field(None, title="Model Scenario Id")
    source_scenario_id: str | None = Field(None, title="Source Scenario Id")
    technology_id: str | None = Field(None, title="Technology Id")
    commodity_id: str | None = Field(None, title="Commodity Id")
    operating_mode_id: str | None = Field(None, title="Operating Mode Id")
    owner: str | None = Field(None, title="owner")
    node: str | None = Field(None, title="node")
    edge: str | None = Field(None, title="edge")
    model_scenario: str | None = Field(None, title="model_scenario")
    source_scenario: str | None = Field(None, title="source_scenario")
    technology: str | None = Field(None, title="technology")
    commodity: str | None = Field(None, title="commodity")
    operating_mode: str | None = Field(None, title="operating_mode")


class Asset(PydanticBaseModel):
    uuid: UUID | None = Field(None, title="Uuid")
    capacity: float = Field(..., title="Capacity")
    capacity_unit: str = Field(..., title="Capacity Unit")
    sector: str = Field(..., title="Sector")
    asset_type: str = Field(..., title="Asset Type")
    edge: str | Edge | None = Field(None, title="Edge")
    node: str | Node | None = Field(None, title="Node")
    technology: str | Technology | None = Field(None, title="Technology")
    parents: list[str] | list[Node] | None = Field([], title="Parents")
    children: list[str] | list[Node] | None = Field([], title="Children")
    power_unit: str | PowerUnit | None = Field(None, title="Power Unit")
    power_plant: str | PowerPlant | None = Field(None, title="Power Plant")
    power_transmission: str | PowerTransmission | None = Field(None, title="Power Transmission")
    extra_properties: PowerUnit | PowerPlant | PowerTransmission | None = Field(
        None, title="Extra Properties"
    )


class AssetPagination(PydanticBaseModel):
    current_page: int | None = Field(0, title="current_page")
    next_page: int | None = Field(..., title="next_page")
    total_results: int | None = Field(..., title="total_results")
    assets: list[Asset] | None = Field(..., title="")


class Commodity(PydanticBaseModel):
    slug: str = Field(..., title="Slug")
    public: bool | None = Field(True, title="Public")
    creation_time: AwareDatetime | None = Field(..., title="Creation Time")
    name: str = Field(..., title="Name")
    properties: dict[str, Any] | None = Field(None, title="Properties")
    owner: str | None = Field(..., title="Owner")
    technology: Technology | str | None = Field(None, title="Technology")
    operating_modes: list[OperatingMode] | list[str] | None = Field(None, title="Operating Modes")
    records: list[Record] | list[str] | None = Field(None, title="Records")
    parents: list[Commodity] | list[str] | None = Field(None, title="Parents")
    children: list[Commodity] | list[str] | None = Field(None, title="Children")


class CommodityPagination(PydanticBaseModel):
    current_page: int | None = Field(0, title="current_page")
    next_page: int | None = Field(..., title="next_page")
    total_results: int | None = Field(..., title="total_results")
    commodities: list[Commodity] | None = Field(..., title="")


class Edge(PydanticBaseModel):
    slug: str = Field(..., title="Slug")
    public: bool | None = Field(True, title="Public")
    creation_time: AwareDatetime | None = Field(..., title="Creation Time")
    owner: str | None = Field(..., title="Owner")
    source_node: Node | str | None = Field(None, title="Source Node")
    target_node: Node | str | None = Field(None, title="Target Node")
    records: list[Record] | list[str] | None = Field(None, title="Records")


class EdgePagination(PydanticBaseModel):
    current_page: int | None = Field(0, title="current_page")
    next_page: int | None = Field(..., title="next_page")
    total_results: int | None = Field(..., title="total_results")
    edges: list[Edge] | None = Field(..., title="")


class Job(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(True, title="Public")
    creation_time: AwareDatetime | None = Field(..., title="Creation Time")
    status: str = Field(..., title="Status")
    successful: bool | None = Field(None, title="Successful")
    uuid: UUID | None = Field(..., title="Uuid")
    owner: str | None = Field(..., title="Owner")
    run: str | Run | None = Field(None, title="Run")


class JobPagination(PydanticBaseModel):
    current_page: int | None = Field(0, title="current_page")
    next_page: int | None = Field(..., title="next_page")
    total_results: int | None = Field(..., title="total_results")
    jobs: list[Job] | None = Field(..., title="")


class License(PydanticBaseModel):
    slug: str = Field(..., title="Slug")
    public: bool | None = Field(True, title="Public")
    creation_time: AwareDatetime | None = Field(..., title="Creation Time")
    name: str = Field(..., title="Name")
    abbreviation: str = Field(..., title="Abbreviation")
    full_text: str = Field(..., title="Full Text")
    owner: str | None = Field(..., title="Owner")
    sources: list[Source] | list[str] | None = Field(None, title="Sources")


class LicensePagination(PydanticBaseModel):
    current_page: int | None = Field(0, title="current_page")
    next_page: int | None = Field(..., title="next_page")
    total_results: int | None = Field(..., title="total_results")
    licenses: list[License] | None = Field(..., title="")


class Model(PydanticBaseModel):
    slug: str = Field(..., title="Slug")
    public: bool | None = Field(True, title="Public")
    creation_time: AwareDatetime | None = Field(..., title="Creation Time")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    version: str | None = Field(None, title="Version")
    sectors: list[str] = Field(..., title="Sectors")
    start_year: int = Field(..., title="Start Year")
    end_year: int = Field(..., title="End Year")
    n_year_parts: int | None = Field(1, title="N Year Parts")
    n_day_parts: int | None = Field(1, title="N Day Parts")
    start_year_part: int | None = Field(1, title="Start Year Part")
    end_year_part: int | None = Field(1, title="End Year Part")
    status: str | None = Field("draft", title="Status")
    anon_views: int | None = Field(0, title="Anon Views")
    owner: str | None = Field(..., title="Owner")
    nodes: list[Node | str] | None = Field(None, title="Nodes")
    model_scenarios: list[ModelScenario] | list[str] | None = Field(None, title="Model Scenarios")
    runs: list[Run | str] | None = Field(None, title="Runs")
    urls: list[UrlIndex] | list[str] | None = Field(None, title="Urls")


class ModelPagination(PydanticBaseModel):
    current_page: int | None = Field(0, title="current_page")
    next_page: int | None = Field(..., title="next_page")
    total_results: int | None = Field(..., title="total_results")
    models: list[Model] | None = Field(..., title="")


class ModelScenario(PydanticBaseModel):
    slug: str = Field(..., title="Slug")
    public: bool | None = Field(True, title="Public")
    creation_time: AwareDatetime | None = Field(..., title="Creation Time")
    name: str = Field(..., title="Name")
    description: str | None = Field(None, title="Description")
    version: str | None = Field(None, title="Version")
    status: str | None = Field("draft", title="Status")
    featured: bool | None = Field(False, title="Featured")
    owner: str | None = Field(..., title="Owner")
    model: Model | str | None = Field(None, title="Model")
    scenario_index_id: UUID | None = Field(None, title="Scenario Index Id")
    scenario_heritage: ScenarioIndex | str | None = Field(None, title="Scenario Heritage")
    runs: list[Run] | list[str] | None = Field(None, title="Runs")
    urls: list[UrlIndex] | list[str] | None = Field(None, title="Urls")
    records: list[Record] | list[str] | None = Field(None, title="Records")


class ModelScenarioPagination(PydanticBaseModel):
    current_page: int | None = Field(0, title="current_page")
    next_page: int | None = Field(..., title="next_page")
    total_results: int | None = Field(..., title="total_results")
    model_scenarios: list[ModelScenario] | None = Field(..., title="")


class Node(PydanticBaseModel):
    slug: str = Field(..., title="Slug")
    public: bool | None = Field(True, title="Public")
    creation_time: AwareDatetime | None = Field(..., title="Creation Time")
    type_alias: str | None = Field(None, title="Type Alias")
    properties: dict[str, Any] | None = Field(None, title="Properties")
    is_asset: bool | None = Field(None, title="Is Asset")
    uuid: UUID = Field(..., title="Uuid")
    owner: str | None = Field(..., title="Owner")
    node_type: NodeTypeRank | str | None = Field(None, title="Node Type")
    asset_properties: Asset | None = None
    aliases: list[NodeAlias] | list[str] | None = Field(None, title="Aliases")
    records: list[Record] | list[str] | None = Field(None, title="Records")
    neighbours_out: list[Node] | list[str] | None = Field(None, title="Neighbours Out")
    neighbours_in: list[Node] | list[str] | None = Field(None, title="Neighbours In")
    parents: list[Node] | list[str] | None = Field(None, title="Parents")
    children: list[Node] | list[str] | None = Field(None, title="Children")


class NodeAlias(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(True, title="Public")
    creation_time: AwareDatetime | None = Field(..., title="Creation Time")
    alias: str = Field(..., title="Alias")
    alias_type: str = Field(..., title="Alias Type")
    alias_lang: str | None = Field(..., title="Alias Lang")
    primary: bool | None = Field(..., title="Primary")
    uuid: UUID | None = Field(..., title="Uuid")
    owner: UUID | None = Field(..., title="Owner")
    node: Node | str | None = Field(None, title="Node")
    power_unit: NodeAlias | str | None = Field(None, title="Power Unit")


class NodeAliasPagination(PydanticBaseModel):
    current_page: int | None = Field(0, title="current_page")
    next_page: int | None = Field(..., title="next_page")
    total_results: int | None = Field(..., title="total_results")
    node_aliases: list[NodeAlias] | None = Field(..., title="")


class NodePagination(PydanticBaseModel):
    current_page: int | None = Field(0, title="current_page")
    next_page: int | None = Field(..., title="next_page")
    total_results: int | None = Field(..., title="total_results")
    nodes: list[Node] | None = Field(..., title="")


class NodeTypeRank(PydanticBaseModel):
    nodes: list[Node] | list[str] | None = Field(None, title="Nodes")
    discriminator: NodeType
    rank: int = Field(..., title="Rank")


class OperatingMode(PydanticBaseModel):
    slug: str = Field(..., title="Slug")
    public: bool | None = Field(True, title="Public")
    creation_time: AwareDatetime | None = Field(..., title="Creation Time")
    name: str = Field(..., title="Name")
    properties: dict[str, Any] | None = Field(None, title="Properties")
    owner: str | None = Field(..., title="Owner")
    technology: Technology | str | None = Field(None, title="Technology")
    commodity: Commodity | str | None = Field(None, title="Commodity")
    records: list[Record] | list[str] | None = Field(None, title="Records")


class OperatingModePagination(PydanticBaseModel):
    current_page: int | None = Field(0, title="current_page")
    next_page: int | None = Field(..., title="next_page")
    total_results: int | None = Field(..., title="total_results")
    operating_modes: list[OperatingMode] | None = Field(..., title="")


class Publisher(PydanticBaseModel):
    slug: str = Field(..., title="Slug")
    public: bool | None = Field(True, title="Public")
    creation_time: AwareDatetime | None = Field(..., title="Creation Time")
    name: str = Field(..., title="Name")
    organisation_type: str = Field(..., title="Organisation Type")
    short_name: str | None = Field(None, title="Short Name")
    url: str = Field(..., title="Url")
    owner: str | None = Field(..., title="Owner")
    sources: list[Source] | list[str] | None = Field(None, title="Sources")


class PublisherPagination(PydanticBaseModel):
    current_page: int | None = Field(0, title="current_page")
    next_page: int | None = Field(..., title="next_page")
    total_results: int | None = Field(..., title="total_results")
    publishers: list[Publisher] | None = Field(..., title="")


class Record(PydanticBaseModel):
    slug: str | None = Field(None, title="Slug")
    public: bool | None = Field(True, title="Public")
    creation_time: AwareDatetime | None = Field(..., title="Creation Time")
    year: int = Field(..., title="Year")
    n_year_parts: int = Field(..., title="N Year Parts")
    year_part: int = Field(..., title="Year Part")
    n_day_parts: int = Field(..., title="N Day Parts")
    day_part: int = Field(..., title="Day Part")
    timestamp: AwareDatetime | None = Field(..., title="Timestamp")
    scenario_type: ScenarioType
    location_type: LocationType
    entity_type: EntityType
    record_type: RecordType
    value: float = Field(..., title="Value")
    unit: str = Field(..., title="Unit")
    properties: dict[str, Any] | None = Field(None, title="Properties")
    uuid: UUID | None = Field(..., title="Uuid")
    owner: UUID | None = Field(..., title="Owner")
    node: Node | str | None = Field(None, title="Node")
    edge: Edge | str | None = Field(None, title="Edge")
    technology: Technology | str | None = Field(None, title="Technology")
    commodity: Commodity | str | None = Field(None, title="Commodity")
    operating_mode: OperatingMode | str | None = Field(None, title="Operating Mode")
    source_scenario: SourceScenario | str | None = Field(None, title="Source Scenario")
    model_scenario: ModelScenario | str | None = Field(None, title="Model Scenario")


class RecordPagination(PydanticBaseModel):
    current_page: int | None = Field(0, title="current_page")
    next_page: int | None = Field(..., title="next_page")
    total_results: int | None = Field(..., title="total_results")
    records: list[Record] | None = Field(..., title="")


class Run(PydanticBaseModel):
    slug: str = Field(..., title="Slug")
    public: bool | None = Field(True, title="Public")
    creation_time: AwareDatetime | None = Field(..., title="Creation Time")
    name: str = Field(..., title="Name")
    run_spec: dict[str, Any] | None = Field(..., title="Run Spec")
    validated: bool | None = Field(False, title="Validated")
    description: str | None = Field(..., title="Description")
    featured: bool | None = Field(False, title="Featured")
    owner: str | None = Field(..., title="Owner")
    model_scenario: str | ModelScenario | None = Field(None, title="Model Scenario")
    jobs: list[Job] | list[str] | None = Field(None, title="Jobs")
    urls: list[UrlIndex] | list[str] | None = Field(None, title="Urls")


class RunPagination(PydanticBaseModel):
    current_page: int | None = Field(0, title="current_page")
    next_page: int | None = Field(..., title="next_page")
    total_results: int | None = Field(..., title="total_results")
    runs: list[Run] | None = Field(..., title="")


class Source(PydanticBaseModel):
    slug: str = Field(..., title="Slug")
    public: bool | None = Field(True, title="Public")
    creation_time: AwareDatetime | None = Field(..., title="Creation Time")
    name: str = Field(..., title="Name")
    short_name: str = Field(..., title="Short Name")
    description: str = Field(..., title="Description")
    year: int | None = Field(None, title="Year")
    month: int | None = Field(None, title="Month")
    day: int | None = Field(None, title="Day")
    quarter: int | None = Field(None, title="Quarter")
    owner: str | None = Field(..., title="Owner")
    publisher: Publisher | str | None = Field(None, title="Publisher")
    license: License | str | None = Field(None, title="License")


class SourcePagination(PydanticBaseModel):
    current_page: int | None = Field(0, title="current_page")
    next_page: int | None = Field(..., title="next_page")
    total_results: int | None = Field(..., title="total_results")
    sources: list[Source] | None = Field(..., title="")


class SourceScenario(PydanticBaseModel):
    slug: str = Field(..., title="Slug")
    public: bool | None = Field(True, title="Public")
    creation_time: AwareDatetime | None = Field(..., title="Creation Time")
    name: str = Field(..., title="Name")
    description: str | None = Field(None, title="Description")
    version: str | None = Field(None, title="Version")
    status: str | None = Field("draft", title="Status")
    featured: bool | None = Field(False, title="Featured")
    owner: str | None = Field(..., title="Owner")
    scenario_index_id: UUID | None = Field(None, title="Scenario Index Id")
    source: Source | str | None = Field(None, title="Source")
    records: list[Record] | list[str] | None = Field(None, title="Records")


class SourceScenarioPagination(PydanticBaseModel):
    current_page: int | None = Field(0, title="current_page")
    next_page: int | None = Field(..., title="next_page")
    total_results: int | None = Field(..., title="total_results")
    source_scenarios: list[SourceScenario] | None = Field(..., title="")


class Technology(PydanticBaseModel):
    slug: str = Field(..., title="Slug")
    public: bool | None = Field(True, title="Public")
    creation_time: AwareDatetime | None = Field(..., title="Creation Time")
    name: str = Field(..., title="Name")
    properties: dict[str, Any] | None = Field(None, title="Properties")
    owner: str | None = Field(None, title="Owner")
    commodities: list[Commodity] | list[str] | None = Field(None, title="Commodities")
    operating_modes: list[OperatingMode] | list[str] | None = Field(None, title="Operating Modes")
    records: list[Record] | list[str] | None = Field(None, title="Records")
    parents: list[Technology] | list[str] | None = Field(None, title="Parents")
    children: list[Technology] | list[str] | None = Field(None, title="Children")


class TechnologyPagination(PydanticBaseModel):
    current_page: int | None = Field(0, title="current_page")
    next_page: int | None = Field(..., title="next_page")
    total_results: int | None = Field(..., title="total_results")
    technologies: list[Technology] | None = Field(..., title="")


class UrlIndex(PydanticBaseModel):
    slug: str = Field(..., title="Slug")
    public: bool | None = Field(True, title="Public")
    creation_time: AwareDatetime | None = Field(..., title="Creation Time")
    url: str = Field(..., title="Url")
    url_type: URLType
    properties: dict[str, Any] | None = Field(None, title="Properties")
    owner: str | None = Field(None, title="Owner")
    model: Model | str | None = Field(None, title="Model")
    modelscenario: str | ModelScenario | None = Field(None, title="Modelscenario")
    run: str | Run | None = Field(None, title="Run")


class UrlIndexPagination(PydanticBaseModel):
    current_page: int | None = Field(0, title="current_page")
    next_page: int | None = Field(..., title="next_page")
    total_results: int | None = Field(..., title="total_results")
    url_index: list[UrlIndex] | None = Field(..., title="")


User.model_rebuild()
Asset.model_rebuild()
Commodity.model_rebuild()
Edge.model_rebuild()
Job.model_rebuild()
License.model_rebuild()
Model.model_rebuild()
ModelScenario.model_rebuild()
Node.model_rebuild()
OperatingMode.model_rebuild()
Publisher.model_rebuild()
Record.model_rebuild()
Run.model_rebuild()
