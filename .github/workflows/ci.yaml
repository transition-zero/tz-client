# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: ci-tests

on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    environment: ci
    env:
      AUTH0_DOMAIN: ${{ vars.AUTH0_DOMAIN}}
      AUTH0_AUDIENCE: ${{ vars.AUTH0_AUDIENCE}}
      CLIENT_ID: ${{ vars.CLIENT_ID}}
      CLIENT_SECRET: ${{ vars.CLIENT_SECRET}}
      TEST_USER: ${{ vars.TEST_USER}}
      TEST_PW: ${{ vars.TEST_PW}}
      GIST_ID: ${{ vars.GIST_ID}}
      TZ_API_URL: ${{ vars.TZ_API_URL}}
      TZ_API_VERSION: ${{ vars.TZ_API_VERSION }}


    steps:

    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: display env vars
      run: |
        echo "AUTH0_DOMAIN: ${{ vars.AUTH0_DOMAIN }}"
        echo "AUTH0_AUDIENCE: ${{ vars.AUTH0_AUDIENCE }}"
        echo "CLIENT_ID: ${{ vars.CLIENT_ID }}"
        echo "TEST_USER: ${{ vars.TEST_USER }}"
        echo "TEST_PW: ${{ vars.TEST_PW}}"
        echo "GIST_ID: ${{ vars.GIST_ID}}"
        echo "TZ_API_URL: ${{ vars.TZ_API_URL}}"
        echo "TZ_API_VERSION: ${{ vars.TZ_API_VERSION}}"
        echo "HOME: $HOME"

    - name: mkdir token
      run: |
        mkdir $HOME/.tz

    - name: cURL an access token
      id: curlToken
      uses: satak/webrequest-action@master
      with:
        url: "https://${{vars.AUTH0_DOMAIN}}/oauth/token"
        method: POST
        payload: '{
          "client_id": "${{vars.CLIENT_ID}}",
          "username": "${{vars.TEST_USER}}",
          "password": "${{vars.TEST_PW}}",
          "realm": "Username-Password-Authentication",
          "client_secret": "${{secrets.CLIENT_SECRET}}",
          "scope": "openid permissions",
          "audience": "${{vars.AUTH0_AUDIENCE}}",
          "grant_type": "http://auth0.com/oauth/grant-type/password-realm"
        }'

    - name: response echo
      run: |
        echo '${{steps.curlToken.outputs.output}}' > $HOME/tmp.json

    - name: parse token from curl request
      run: |
        echo "$(jq '.data' $HOME/tmp.json)" > $HOME/.tz/token.json

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip

    - name: Install repo
      run: |
        pip install -e .[dev]

    - name: Sleep for 5 seconds
      uses: jakejarvis/wait-action@master
      with:
        time: '5s'

    - name: Test with pytest and capture coverage
      run: |
        pytest --cov=tz --cov-report=json:coverage.json

    - name: parse coverage report
      id: show_coverage_val
      run: |
        jq '.totals.percent_covered' coverage.json

    - name: parse coverage report
      id: extract_coverage_val
      run: |
        echo "COVERAGE=$(jq '.totals.percent_covered' coverage.json)" >> $GITHUB_ENV

    - name: substring coverage
      id: substring_coverage
      run: |
        coverage_int=$(echo "${{ env.COVERAGE }}" | cut -c 1-2)
        echo "coverage_int=$coverage_int" >> $GITHUB_OUTPUT

    - name: Create the Badge
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: ${{vars.GIST_ID}}
        filename: coverage_badge.json
        label: coverage
        message: "%${{ steps.substring_coverage.outputs.coverage_int }}"
        valColorRange: ${{ env.COVERAGE }}
        maxColorRange: 100
        minColorRange: 50
